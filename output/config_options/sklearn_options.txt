[
    {
        "file": "mljar-supervised/tests/tests_algorithms/test_nn.py",
        "class": "sklearn.preprocessing.LabelBinarizer",
        "parameter": {},
        "variable parameters": {},
        "variable": "lb",
        "line no": 144
    },
    {
        "file": "mljar-supervised/tests/tests_automl/test_automl.py",
        "class": "sklearn.decomposition.PCA",
        "parameter": {
            "random_state": {
                "value": "0",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "new_X",
        "line no": 130
    },
    {
        "file": "mljar-supervised/tests/tests_automl/test_automl.py",
        "class": "sklearn.decomposition.PCA",
        "parameter": {
            "random_state": {
                "value": "0",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "pipeline",
        "line no": 139
    },
    {
        "file": "mljar-supervised/supervised/tuner/mljar_tuner.py",
        "class": "sklearn.preprocessing.OneHotEncoder",
        "parameter": {
            "sparse": {
                "value": "False",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "oh",
        "line no": 1062
    },
    {
        "file": "mljar-supervised/supervised/algorithms/baseline.py",
        "class": "sklearn.dummy.DummyClassifier",
        "parameter": {
            "strategy": {
                "value": "'prior'",
                "type": "Constant"
            },
            "random_state": {
                "value": "params.get('seed', 1)",
                "type": "Call"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 29
    },
    {
        "file": "mljar-supervised/supervised/algorithms/baseline.py",
        "class": "sklearn.dummy.DummyRegressor",
        "parameter": {
            "strategy": {
                "value": "'mean'",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 55
    },
    {
        "file": "mljar-supervised/supervised/algorithms/nn.py",
        "class": "sklearn.neural_network.MLPClassifier",
        "parameter": {
            "hidden_layer_sizes": {
                "value": "(h1, h2)",
                "type": "Tuple"
            },
            "activation": {
                "value": "'relu'",
                "type": "Constant"
            },
            "solver": {
                "value": "'adam'",
                "type": "Constant"
            },
            "learning_rate": {
                "value": "params.get('learning_rate_type', 'constant')",
                "type": "Call"
            },
            "learning_rate_init": {
                "value": "learning_rate",
                "type": "Name"
            },
            "alpha": {
                "value": "params.get('alpha', 0.0001)",
                "type": "Call"
            },
            "early_stopping": {
                "value": "True",
                "type": "Constant"
            },
            "n_iter_no_change": {
                "value": "50",
                "type": "Constant"
            },
            "max_iter": {
                "value": "max_iter",
                "type": "Name"
            },
            "random_state": {
                "value": "params.get('seed', 123)",
                "type": "Call"
            }
        },
        "variable parameters": {
            "learning_rate": {
                "0": {
                    "value": "params.get('learning_rate', 0.05)",
                    "type": "Call"
                }
            },
            "max_iter": {
                "0": {
                    "value": "500",
                    "type": "Constant"
                }
            }
        },
        "variable": "self.model",
        "line no": 80
    },
    {
        "file": "mljar-supervised/supervised/algorithms/nn.py",
        "class": "sklearn.neural_network.MLPRegressor",
        "parameter": {
            "hidden_layer_sizes": {
                "value": "(h1, h2)",
                "type": "Tuple"
            },
            "activation": {
                "value": "'relu'",
                "type": "Constant"
            },
            "solver": {
                "value": "'adam'",
                "type": "Constant"
            },
            "learning_rate": {
                "value": "'constant'",
                "type": "Constant"
            },
            "learning_rate_init": {
                "value": "learning_rate",
                "type": "Name"
            },
            "momentum": {
                "value": "momentum",
                "type": "Name"
            },
            "early_stopping": {
                "value": "early_stopping",
                "type": "Name"
            },
            "max_iter": {
                "value": "max_iter",
                "type": "Name"
            }
        },
        "variable parameters": {
            "learning_rate": {
                "0": {
                    "value": "params.get('learning_rate', 0.05)",
                    "type": "Call"
                }
            },
            "momentum": {
                "0": {
                    "value": "params.get('momentum', 0.9)",
                    "type": "Call"
                }
            },
            "early_stopping": {
                "0": {
                    "value": "True",
                    "type": "Constant"
                }
            },
            "max_iter": {
                "0": {
                    "value": "500",
                    "type": "Constant"
                }
            }
        },
        "variable": "self.model",
        "line no": 113
    },
    {
        "file": "mljar-supervised/supervised/algorithms/linear.py",
        "class": "sklearn.linear_model.LogisticRegression",
        "parameter": {
            "max_iter": {
                "value": "500",
                "type": "Constant"
            },
            "tol": {
                "value": "0.0005",
                "type": "Constant"
            },
            "n_jobs": {
                "value": "self.params.get('n_jobs', -1)",
                "type": "Call"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 33
    },
    {
        "file": "mljar-supervised/supervised/algorithms/linear.py",
        "class": "sklearn.linear_model.LinearRegression",
        "parameter": {
            "n_jobs": {
                "value": "self.params.get('n_jobs', -1)",
                "type": "Call"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 118
    },
    {
        "file": "mljar-supervised/supervised/algorithms/extra_trees.py",
        "class": "sklearn.ensemble.ExtraTreesClassifier",
        "parameter": {
            "n_estimators": {
                "value": "self.trees_in_step",
                "type": "Attribute"
            },
            "criterion": {
                "value": "params.get('criterion', 'gini')",
                "type": "Call"
            },
            "max_features": {
                "value": "params.get('max_features', 0.8)",
                "type": "Call"
            },
            "max_depth": {
                "value": "params.get('max_depth', 6)",
                "type": "Call"
            },
            "min_samples_split": {
                "value": "params.get('min_samples_split', 4)",
                "type": "Call"
            },
            "min_samples_leaf": {
                "value": "params.get('min_samples_leaf', 1)",
                "type": "Call"
            },
            "warm_start": {
                "value": "True",
                "type": "Constant"
            },
            "n_jobs": {
                "value": "params.get('n_jobs', -1)",
                "type": "Call"
            },
            "random_state": {
                "value": "params.get('seed', 1)",
                "type": "Call"
            }
        },
        "variable parameters": {
            "self.trees_in_step": {
                "0": {
                    "value": "additional.get('trees_in_step', 100)",
                    "type": "Call"
                },
                "1": {
                    "value": "regression_additional.get('trees_in_step', 100)",
                    "type": "Call"
                }
            }
        },
        "variable": "self.model",
        "line no": 36
    },
    {
        "file": "mljar-supervised/supervised/algorithms/extra_trees.py",
        "class": "sklearn.ensemble.ExtraTreesRegressor",
        "parameter": {
            "n_estimators": {
                "value": "self.trees_in_step",
                "type": "Attribute"
            },
            "criterion": {
                "value": "params.get('criterion', 'mse')",
                "type": "Call"
            },
            "max_features": {
                "value": "params.get('max_features', 0.6)",
                "type": "Call"
            },
            "max_depth": {
                "value": "params.get('max_depth', 6)",
                "type": "Call"
            },
            "min_samples_split": {
                "value": "params.get('min_samples_split', 30)",
                "type": "Call"
            },
            "min_samples_leaf": {
                "value": "params.get('min_samples_leaf', 1)",
                "type": "Call"
            },
            "warm_start": {
                "value": "True",
                "type": "Constant"
            },
            "n_jobs": {
                "value": "params.get('n_jobs', -1)",
                "type": "Call"
            },
            "random_state": {
                "value": "params.get('seed', 1)",
                "type": "Call"
            }
        },
        "variable parameters": {
            "self.trees_in_step": {
                "0": {
                    "value": "additional.get('trees_in_step', 100)",
                    "type": "Call"
                },
                "1": {
                    "value": "regression_additional.get('trees_in_step', 100)",
                    "type": "Call"
                }
            }
        },
        "variable": "self.model",
        "line no": 68
    },
    {
        "file": "mljar-supervised/supervised/algorithms/decision_tree.py",
        "class": "sklearn.tree.DecisionTreeClassifier",
        "parameter": {
            "criterion": {
                "value": "params.get('criterion', 'gini')",
                "type": "Call"
            },
            "max_depth": {
                "value": "params.get('max_depth', 3)",
                "type": "Call"
            },
            "random_state": {
                "value": "params.get('seed', 1)",
                "type": "Call"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 100
    },
    {
        "file": "mljar-supervised/supervised/algorithms/decision_tree.py",
        "class": "sklearn.tree.DecisionTreeRegressor",
        "parameter": {
            "criterion": {
                "value": "params.get('criterion', 'mse')",
                "type": "Call"
            },
            "max_depth": {
                "value": "params.get('max_depth', 3)",
                "type": "Call"
            },
            "random_state": {
                "value": "params.get('seed', 1)",
                "type": "Call"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 172
    },
    {
        "file": "mljar-supervised/supervised/algorithms/random_forest.py",
        "class": "sklearn.ensemble.RandomForestClassifier",
        "parameter": {
            "n_estimators": {
                "value": "self.trees_in_step",
                "type": "Attribute"
            },
            "criterion": {
                "value": "params.get('criterion', 'gini')",
                "type": "Call"
            },
            "max_features": {
                "value": "params.get('max_features', 0.8)",
                "type": "Call"
            },
            "max_depth": {
                "value": "params.get('max_depth', 6)",
                "type": "Call"
            },
            "min_samples_split": {
                "value": "params.get('min_samples_split', 4)",
                "type": "Call"
            },
            "min_samples_leaf": {
                "value": "params.get('min_samples_leaf', 1)",
                "type": "Call"
            },
            "warm_start": {
                "value": "True",
                "type": "Constant"
            },
            "n_jobs": {
                "value": "params.get('n_jobs', -1)",
                "type": "Call"
            },
            "random_state": {
                "value": "params.get('seed', 1)",
                "type": "Call"
            }
        },
        "variable parameters": {
            "self.trees_in_step": {
                "0": {
                    "value": "additional.get('trees_in_step', 5)",
                    "type": "Call"
                },
                "1": {
                    "value": "regression_additional.get('trees_in_step', 5)",
                    "type": "Call"
                }
            }
        },
        "variable": "self.model",
        "line no": 37
    },
    {
        "file": "mljar-supervised/supervised/algorithms/random_forest.py",
        "class": "sklearn.ensemble.RandomForestRegressor",
        "parameter": {
            "n_estimators": {
                "value": "self.trees_in_step",
                "type": "Attribute"
            },
            "criterion": {
                "value": "params.get('criterion', 'mse')",
                "type": "Call"
            },
            "max_features": {
                "value": "params.get('max_features', 0.8)",
                "type": "Call"
            },
            "max_depth": {
                "value": "params.get('max_depth', 6)",
                "type": "Call"
            },
            "min_samples_split": {
                "value": "params.get('min_samples_split', 4)",
                "type": "Call"
            },
            "min_samples_leaf": {
                "value": "params.get('min_samples_leaf', 1)",
                "type": "Call"
            },
            "warm_start": {
                "value": "True",
                "type": "Constant"
            },
            "n_jobs": {
                "value": "params.get('n_jobs', -1)",
                "type": "Call"
            },
            "random_state": {
                "value": "params.get('seed', 1)",
                "type": "Call"
            }
        },
        "variable parameters": {
            "self.trees_in_step": {
                "0": {
                    "value": "additional.get('trees_in_step', 5)",
                    "type": "Call"
                },
                "1": {
                    "value": "regression_additional.get('trees_in_step', 5)",
                    "type": "Call"
                }
            }
        },
        "variable": "self.model",
        "line no": 69
    },
    {
        "file": "mljar-supervised/supervised/algorithms/knn.py",
        "class": "sklearn.neighbors.KNeighborsClassifier",
        "parameter": {
            "n_neighbors": {
                "value": "params.get('n_neighbors', 3)",
                "type": "Call"
            },
            "weights": {
                "value": "params.get('weights', 'uniform')",
                "type": "Call"
            },
            "algorithm": {
                "value": "'kd_tree'",
                "type": "Constant"
            },
            "n_jobs": {
                "value": "params.get('n_jobs', -1)",
                "type": "Call"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 70
    },
    {
        "file": "mljar-supervised/supervised/algorithms/knn.py",
        "class": "sklearn.neighbors.KNeighborsRegressor",
        "parameter": {
            "n_neighbors": {
                "value": "params.get('n_neighbors', 3)",
                "type": "Call"
            },
            "weights": {
                "value": "params.get('weights', 'uniform')",
                "type": "Call"
            },
            "algorithm": {
                "value": "'ball_tree'",
                "type": "Constant"
            },
            "n_jobs": {
                "value": "params.get('n_jobs', -1)",
                "type": "Call"
            }
        },
        "variable parameters": {},
        "variable": "self.model",
        "line no": 88
    },
    {
        "file": "mljar-supervised/supervised/utils/shap.py",
        "class": "sklearn.preprocessing.OneHotEncoder",
        "parameter": {
            "sparse": {
                "value": "False",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "oh",
        "line no": 94
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/kmeans_transformer.py",
        "class": "sklearn.preprocessing.StandardScaler",
        "parameter": {
            "copy": {
                "value": "True",
                "type": "Constant"
            },
            "with_mean": {
                "value": "True",
                "type": "Constant"
            },
            "with_std": {
                "value": "True",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "self._scale",
        "line no": 52
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/kmeans_transformer.py",
        "class": "sklearn.cluster.MiniBatchKMeans",
        "parameter": {
            "n_clusters": {
                "value": "n_clusters",
                "type": "Name"
            },
            "init": {
                "value": "'k-means++'",
                "type": "Constant"
            }
        },
        "variable parameters": {
            "n_clusters": {
                "0": {
                    "value": "min(n_clusters, X.shape[1])",
                    "type": "Call"
                },
                "1": {
                    "value": "self._kmeans.cluster_centers_.shape[0]",
                    "type": "Subscript"
                }
            }
        },
        "variable": "self._kmeanskmeans",
        "line no": 56
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/text_transformer.py",
        "class": "sklearn.feature_extraction.text.TfidfVectorizer",
        "parameter": {
            "analyzer": {
                "value": "'word'",
                "type": "Constant"
            },
            "stop_words": {
                "value": "'english'",
                "type": "Constant"
            },
            "lowercase": {
                "value": "True",
                "type": "Constant"
            },
            "max_features": {
                "value": "self._max_features",
                "type": "Attribute"
            }
        },
        "variable parameters": {
            "self._max_features": {
                "0": {
                    "value": "100",
                    "type": "Constant"
                }
            }
        },
        "variable": "self._vectorizer",
        "line no": 18
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/text_transformer.py",
        "class": "sklearn.feature_extraction.text.TfidfVectorizer",
        "parameter": {
            "analyzer": {
                "value": "'word'",
                "type": "Constant"
            },
            "stop_words": {
                "value": "'english'",
                "type": "Constant"
            },
            "lowercase": {
                "value": "True",
                "type": "Constant"
            },
            "max_features": {
                "value": "self._max_features",
                "type": "Attribute"
            }
        },
        "variable parameters": {
            "self._max_features": {
                "0": {
                    "value": "100",
                    "type": "Constant"
                }
            }
        },
        "variable": "self._vectorizer",
        "line no": 67
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/label_encoder.py",
        "class": "sklearn.preprocessing.LabelEncoder",
        "parameter": {},
        "variable parameters": {},
        "variable": "self.lbl",
        "line no": 15
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/goldenfeatures_transformer.py",
        "class": "sklearn.tree.DecisionTreeClassifier",
        "parameter": {
            "max_depth": {
                "value": "3",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "clf",
        "line no": 21
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/goldenfeatures_transformer.py",
        "class": "sklearn.tree.DecisionTreeRegressor",
        "parameter": {
            "max_depth": {
                "value": "3",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "clf",
        "line no": 29
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/goldenfeatures_transformer.py",
        "class": "sklearn.tree.DecisionTreeClassifier",
        "parameter": {
            "max_depth": {
                "value": "3",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "clf",
        "line no": 37
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/scale.py",
        "class": "sklearn.preprocessing.StandardScaler",
        "parameter": {
            "copy": {
                "value": "True",
                "type": "Constant"
            },
            "with_mean": {
                "value": "True",
                "type": "Constant"
            },
            "with_std": {
                "value": "True",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "self.scale",
        "line no": 15
    },
    {
        "file": "mljar-supervised/supervised/preprocessing/scale.py",
        "class": "sklearn.preprocessing.StandardScaler",
        "parameter": {
            "copy": {
                "value": "True",
                "type": "Constant"
            },
            "with_mean": {
                "value": "True",
                "type": "Constant"
            },
            "with_std": {
                "value": "True",
                "type": "Constant"
            }
        },
        "variable parameters": {},
        "variable": "self.scale",
        "line no": 80
    },
    {
        "file": "mljar-supervised/supervised/validation/validator_kfold.py",
        "class": "sklearn.model_selection.StratifiedKFold",
        "parameter": {
            "n_splits": {
                "value": "self.k_folds",
                "type": "Attribute"
            },
            "shuffle": {
                "value": "self.shuffle",
                "type": "Attribute"
            },
            "random_state": {
                "value": "random_seed",
                "type": "Name"
            }
        },
        "variable parameters": {
            "self.k_folds": {
                "0": {
                    "value": "self.params.get('k_folds', 5)",
                    "type": "Call"
                }
            },
            "self.shuffle": {
                "0": {
                    "value": "self.params.get('shuffle', True)",
                    "type": "Call"
                }
            },
            "random_seed": {
                "0": {
                    "value": "self.random_seed + r if self.shuffle else None",
                    "type": "IfExp"
                }
            }
        },
        "variable": "",
        "line no": 40
    },
    {
        "file": "mljar-supervised/supervised/validation/validator_kfold.py",
        "class": "sklearn.model_selection.StratifiedKFold",
        "parameter": {
            "n_splits": {
                "value": "self.k_folds",
                "type": "Attribute"
            },
            "shuffle": {
                "value": "self.shuffle",
                "type": "Attribute"
            },
            "random_state": {
                "value": "random_seed",
                "type": "Name"
            }
        },
        "variable parameters": {
            "self.k_folds": {
                "0": {
                    "value": "self.params.get('k_folds', 5)",
                    "type": "Call"
                }
            },
            "self.shuffle": {
                "0": {
                    "value": "self.params.get('shuffle', True)",
                    "type": "Call"
                }
            },
            "random_seed": {
                "0": {
                    "value": "self.random_seed + r if self.shuffle else None",
                    "type": "IfExp"
                }
            }
        },
        "variable": "",
        "line no": 48
    },
    {
        "file": "mljar-supervised/supervised/validation/validator_kfold.py",
        "class": "sklearn.model_selection.KFold",
        "parameter": {
            "n_splits": {
                "value": "self.k_folds",
                "type": "Attribute"
            },
            "shuffle": {
                "value": "self.shuffle",
                "type": "Attribute"
            },
            "random_state": {
                "value": "random_seed",
                "type": "Name"
            }
        },
        "variable parameters": {
            "self.k_folds": {
                "0": {
                    "value": "self.params.get('k_folds', 5)",
                    "type": "Call"
                }
            },
            "self.shuffle": {
                "0": {
                    "value": "self.params.get('shuffle', True)",
                    "type": "Call"
                }
            },
            "random_seed": {
                "0": {
                    "value": "self.random_seed + r if self.shuffle else None",
                    "type": "IfExp"
                }
            }
        },
        "variable": "",
        "line no": 56
    },
    {
        "file": "mljar-supervised/supervised/base_automl.py",
        "class": "sklearn.base.BaseEstimator",
        "parameter": [
            {
                "_mode": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_ml_task": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_results_path": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_total_time_limit": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_model_time_limit": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_algorithms": {
                    "value": "[]",
                    "type": "List"
                }
            },
            {
                "_train_ensemble": {
                    "value": "False",
                    "type": "Constant"
                }
            },
            {
                "_stack_models": {
                    "value": "False",
                    "type": "Constant"
                }
            },
            {
                "_eval_metric": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_validation_strategy": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_verbose": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_explain_level": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_golden_features": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_features_selection": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_start_random_models": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_hill_climbing_steps": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_top_models_to_improve": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_random_state": {
                    "value": "1234",
                    "type": "Constant"
                }
            },
            {
                "_models": {
                    "value": "[]",
                    "type": "List"
                }
            },
            {
                "_best_model": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_verbose": {
                    "value": "True",
                    "type": "Constant"
                }
            },
            {
                "_threshold": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_metrics_details": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_max_metrics": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_confusion_matrix": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_data_info": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_model_subpaths": {
                    "value": "[]",
                    "type": "List"
                }
            },
            {
                "_stacked_models": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_fit_level": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_start_time": {
                    "value": "time.time()",
                    "type": "Call"
                }
            },
            {
                "_time_ctrl": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_all_params": {
                    "value": "{}",
                    "type": "Dict"
                }
            },
            {
                "n_features_in_": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "tuner": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_boost_on_errors": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_kmeans_features": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_mix_encoding": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_max_single_prediction_time": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_optuna_time_budget": {
                    "value": "None",
                    "type": "Constant"
                }
            },
            {
                "_optuna_init_params": {
                    "value": "{}",
                    "type": "Dict"
                }
            },
            {
                "_optuna_verbose": {
                    "value": "True",
                    "type": "Constant"
                }
            },
            {
                "_n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp"
                }
            }
        ],
        "variable parameters": {},
        "variable": "",
        "line no": 59
    }
]